WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

Program = { SOI ~ Statement+ ~ EOI }

Statement = { (Assignment | FunctionDefinition | Print) ~ ";" }

Assignment = { ("let " | "let\t" | "let\n") ~ Identifier ~ (":" ~ Type)? ~ "=" ~ Expression }

Print = { "println" ~ "(" ~ (Expression)? ~ ")" }

FunctionDefinition = { ("fun " | "fun\t" | "fun\n") ~ Identifier ~
    "(" ~ FunctionParameters ~ ")" ~
    ":" ~ Type ~
    "{" ~ FunctionBody ~ "}"
}

FunctionParameters = { (FunctionParameter ~ ("," ~ FunctionParameter)* ~ ","?)* }
FunctionParameter = { Identifier ~ ":" ~ Type }
FunctionBody = { Statement* ~ (("return " | "return\t" | "return\n") ~  Expression)? }

Expression = { 
    FunctionCall |
    IfElseExpression |
    NumberLiteral | 
    BooleanLiteral | 
    StringLiteral |
    Identifier |
    BinaryExpression |
    UnaryExpression
}

BinaryExpression = { "(" ~ BinaryOperator ~ Expression ~ Expression ~ ")" }
BinaryOperator = @{
    "+" | "-" | "*" | "/" |
    "==" | "!=" |
    // 'or equal to' versions of relation operations must come first
    // before their strict versions to avoid parsing errors because PEGs
    // stop on the first match they find, so always put the longer versions
    // first before the shorter ones.
    "<=" | "<" | ">=" | ">" |
    "||" | "&&"
}

UnaryExpression = { "(" ~ UnaryOperator ~ Expression ~ ")" }
UnaryOperator = { "-" | "!" }

FunctionCall = { "(" ~ Identifier ~ Expression* ~ ")" }

IfElseExpression = { ("if " | "if\t" | "if\n" | "if") ~ Expression ~ 
    "{" ~ Expression ~ "}" ~ 
    (
        (("else " | "else\t" | "else\n" | "else") ~ IfElseExpression) |
        ("else" ~ "{" ~ Expression ~ "}")
    )
}

NumberLiteral = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

BooleanLiteral = @{ "true" | "false" }

StringLiteral = ${ "\"" ~ StringBody ~ "\"" }
StringBody = @{ Char* }
Char = {
    !("\"" | "\\") ~ ANY |
    "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t") |
    "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

Identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

Type = @{ "Number" | "Boolean" | "String" | "Unit" }